initSidebarItems({"enum":[["Arch","Native enum for BAP architectures"],["BinOp","Binary Operations"],["Cast","BIL Cast kinds"],["Endian","Byte order"],["ExpressionTag","Tag indicating which variety of expression something is"],["StatementTag","Tag describing what kind of statement a BIL statement is"],["TypeTag","Which kind of type a BAP `Type` is"],["UnOp","Unary Operations"]],"fn":[["roots","Generates from an executable file a list of suspected function entry points for the file."]],"struct":[["Bap","This is a context struct to prove you are on the unique query thread without performing work for each function call."],["BasicDisasm","Safe wrapper around a Basic Disassembler"],["Code","Safe wrapper around a single instruction + associated data"],["Expression","Safe wrapper around a BIL expression"],["Image","Safe wrapper around a loaded program image"],["Instruction","Safe wrapper around an instruction"],["Memory","Safe wrapper around a region of memory"],["Segment","Safe wrapper around a segment"],["SegmentSequence","Safe wrapper around a sequence of segments"],["SegmentSequenceIterator","Safe wrapper around an iterator of a segment sequence"],["Statement","Safe wrapper around a BIL semantic statement"],["StatementSequence","Safe wrapper around a sequence of statements"],["StatementSequenceIterator","Safe wrapper around an iterator of a segment sequence"],["Symbol","Safe wrapper around a symbol"],["SymbolSequence","Safe wrapper around a sequence of symbols"],["SymbolSequenceIterator","Safe wrapper around an iterator of a segment sequence"],["Type","Safe wrapper around a BIL type"],["Variable","Safe wrapper around a BIL variable"],["Word","Safe wrapper around an arbitrary length bitvector"]],"type":[["BitSize","Type representing a data size in bits"],["Result","Type alias for `Result` with a BAP error"]]});