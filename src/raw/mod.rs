pub mod bindings_compat;
use self::bindings_compat::*;

/* automatically generated by rust-bindgen */

pub type bap_disasm = *mut ::libc::c_void;
pub type bap_mem = *mut ::libc::c_void;
pub type bap_bigstring = *mut ::libc::c_void;
pub type bap_bitvector = *mut ::libc::c_void;
pub type bap_insn = *mut ::libc::c_void;
pub type bap_addr = bap_bitvector;
pub type Enum_Unnamed1 = ::libc::c_uint;
pub const BAP_ARM: ::libc::c_uint = 9698489;
pub const BAP_X86: ::libc::c_uint = 11960045;
pub const BAP_X86_64: ::libc::c_uint = 0xba7b274f;
pub type bap_arch = Enum_Unnamed1;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const BAP_LITTLE_ENDIAN: ::libc::c_uint = 1;
pub const BAP_BIG_ENDIAN: ::libc::c_uint = 3;
pub type bap_endian = Enum_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub start: bap_addr,
    pub end: bap_addr,
    pub insn: bap_insn,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_disasm_insn = Struct_Unnamed3;
pub type Enum_Unnamed4 = ::libc::c_uint;
pub const BAP_TYPE_IMM: ::libc::c_uint = 0;
pub const BAP_TYPE_MEM: ::libc::c_uint = 1;
pub type bap_type_kind = Enum_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub kind: bap_type_kind,
    pub _bindgen_data_1_: [u32; 2usize],
}
impl Struct_Unnamed5 {
    pub unsafe fn imm(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mem(&mut self) -> *mut Struct_Unnamed6 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub addr_size: ::libc::c_int,
    pub cell_size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_type = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub name: *mut ::libc::c_char,
    pub _type: *mut bap_type,
    pub tmp: u8,
    pub version: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_var = Struct_Unnamed7;
pub type Enum_Unnamed8 = ::libc::c_uint;
pub const BAP_BINOP_PLUS: ::libc::c_uint = 0;
pub const BAP_BINOP_MINUS: ::libc::c_uint = 1;
pub const BAP_BINOP_TIMES: ::libc::c_uint = 2;
pub const BAP_BINOP_DIVIDE: ::libc::c_uint = 3;
pub const BAP_BINOP_SDIVIDE: ::libc::c_uint = 4;
pub const BAP_BINOP_MOD: ::libc::c_uint = 5;
pub const BAP_BINOP_SMOD: ::libc::c_uint = 6;
pub const BAP_BINOP_LSHIFT: ::libc::c_uint = 7;
pub const BAP_BINOP_RSHIFT: ::libc::c_uint = 8;
pub const BAP_BINOP_ARSHIFT: ::libc::c_uint = 9;
pub const BAP_BINOP_AND: ::libc::c_uint = 10;
pub const BAP_BINOP_OR: ::libc::c_uint = 11;
pub const BAP_BINOP_XOR: ::libc::c_uint = 12;
pub const BAP_BINOP_EQ: ::libc::c_uint = 13;
pub const BAP_BINOP_NEQ: ::libc::c_uint = 14;
pub const BAP_BINOP_LT: ::libc::c_uint = 15;
pub const BAP_BINOP_LE: ::libc::c_uint = 16;
pub const BAP_BINOP_SLT: ::libc::c_uint = 17;
pub const BAP_BINOP_SLE: ::libc::c_uint = 18;
pub type bap_binop = Enum_Unnamed8;
pub type Enum_Unnamed9 = ::libc::c_uint;
pub const BAP_UNOP_NEG: ::libc::c_uint = 0;
pub const BAP_UNOP_NOT: ::libc::c_uint = 1;
pub type bap_unop = Enum_Unnamed9;
pub type Enum_Unnamed10 = ::libc::c_uint;
pub const BAP_EXPR_LOAD: ::libc::c_uint = 0;
pub const BAP_EXPR_STORE: ::libc::c_uint = 1;
pub const BAP_EXPR_BINOP: ::libc::c_uint = 2;
pub const BAP_EXPR_UNOP: ::libc::c_uint = 3;
pub const BAP_EXPR_VAR: ::libc::c_uint = 4;
pub const BAP_EXPR_IMM: ::libc::c_uint = 5;
pub const BAP_EXPR_CAST: ::libc::c_uint = 6;
pub const BAP_EXPR_LET: ::libc::c_uint = 7;
pub const BAP_EXPR_UNK: ::libc::c_uint = 8;
pub const BAP_EXPR_ITE: ::libc::c_uint = 9;
pub const BAP_EXPR_EXTRACT: ::libc::c_uint = 10;
pub const BAP_EXPR_CONCAT: ::libc::c_uint = 11;
pub type bap_expr_kind = Enum_Unnamed10;
pub type Enum_Unnamed11 = ::libc::c_uint;
pub const BAP_CAST_UNSIGNED: ::libc::c_uint = 0;
pub const BAP_CAST_SIGNED: ::libc::c_uint = 1;
pub const BAP_CAST_HIGH: ::libc::c_uint = 2;
pub const BAP_CAST_LOW: ::libc::c_uint = 3;
pub type bap_cast_type = Enum_Unnamed11;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bap_expr {
    pub kind: bap_expr_kind,
    pub _bindgen_data_1_: [u64; 4usize],
}
impl Struct_bap_expr {
    pub unsafe fn load(&mut self) -> *mut Struct_Unnamed12 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn store(&mut self) -> *mut Struct_Unnamed13 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn binop(&mut self) -> *mut Struct_Unnamed14 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn unop(&mut self) -> *mut Struct_Unnamed15 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn var(&mut self) -> *mut *mut bap_var {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn imm(&mut self) -> *mut bap_bitvector {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cast(&mut self) -> *mut Struct_Unnamed16 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _let(&mut self) -> *mut Struct_Unnamed17 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn unknown(&mut self) -> *mut Struct_Unnamed18 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ite(&mut self) -> *mut Struct_Unnamed19 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn extract(&mut self) -> *mut Struct_Unnamed20 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn concat(&mut self) -> *mut Struct_Unnamed21 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_bap_expr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bap_expr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub memory: *mut Struct_bap_expr,
    pub index: *mut Struct_bap_expr,
    pub endian: bap_endian,
    pub size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub memory: *mut Struct_bap_expr,
    pub index: *mut Struct_bap_expr,
    pub value: *mut Struct_bap_expr,
    pub endian: bap_endian,
    pub size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub op: bap_binop,
    pub lhs: *mut Struct_bap_expr,
    pub rhs: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub op: bap_unop,
    pub arg: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub _type: bap_cast_type,
    pub width: ::libc::c_int,
    pub val: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub bound_var: *mut bap_var,
    pub bound_expr: *mut Struct_bap_expr,
    pub body_expr: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub descr: *mut ::libc::c_char,
    pub _type: *mut bap_type,
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub cond: *mut Struct_bap_expr,
    pub t: *mut Struct_bap_expr,
    pub f: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub low_bit: ::libc::c_int,
    pub high_bit: ::libc::c_int,
    pub val: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub low: *mut Struct_bap_expr,
    pub high: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_expr = Struct_bap_expr;
pub type Enum_Unnamed22 = ::libc::c_uint;
pub const BAP_STMT_MOVE: ::libc::c_uint = 0;
pub const BAP_STMT_JMP: ::libc::c_uint = 1;
pub const BAP_STMT_SPECIAL: ::libc::c_uint = 2;
pub const BAP_STMT_WHILE: ::libc::c_uint = 3;
pub const BAP_STMT_IF: ::libc::c_uint = 4;
pub const BAP_STMT_CPU_EXN: ::libc::c_uint = 5;
pub type bap_stmt_kind = Enum_Unnamed22;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bap_stmt {
    pub kind: bap_stmt_kind,
    pub _bindgen_data_1_: [u64; 3usize],
}
impl Struct_bap_stmt {
    pub unsafe fn _move(&mut self) -> *mut Struct_Unnamed23 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn jmp(&mut self) -> *mut *mut bap_expr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn special(&mut self) -> *mut *mut ::libc::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s_while(&mut self) -> *mut Struct_Unnamed24 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ite(&mut self) -> *mut Struct_Unnamed25 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cpu_exn(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_bap_stmt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bap_stmt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub lhs: *mut bap_var,
    pub rhs: *mut bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub cond: *mut bap_expr,
    pub body: *mut *mut Struct_bap_stmt,
}
impl ::std::clone::Clone for Struct_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub cond: *mut bap_expr,
    pub t: *mut *mut Struct_bap_stmt,
    pub f: *mut *mut Struct_bap_stmt,
}
impl ::std::clone::Clone for Struct_Unnamed25 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_stmt = Struct_bap_stmt;
#[link(name = "bap")]
extern "C" {
    pub fn bap_init() -> ();
    pub fn bap_thread_register() -> bool;
    pub fn bap_thread_unregister() -> bool;
    pub fn bap_acquire() -> ();
    pub fn bap_release() -> ();
    pub fn bap_free_disasm(arg1: bap_disasm) -> ();
    pub fn bap_free_mem(arg1: bap_mem) -> ();
    pub fn bap_free_bigstring(arg1: bap_bigstring) -> ();
    pub fn bap_free_bitvector(arg1: bap_bitvector) -> ();
    pub fn bap_free_insn(arg1: bap_insn) -> ();
    pub fn free_disasm_insn(arg1: *mut bap_disasm_insn) -> ();
    pub fn bap_render_stmt(arg1: *mut bap_stmt) -> *mut ::libc::c_char;
    pub fn bap_disasm_to_string(arg1: bap_disasm) -> *mut ::libc::c_char;
    pub fn bap_bitvector_to_string(arg1: bap_bitvector)
     -> *mut ::libc::c_char;
    pub fn bap_bitvector_size(arg1: bap_bitvector)
     -> ::libc::size_t;
    pub fn bap_bitvector_contents(arg1: bap_bitvector)
     -> *mut ::libc::c_char;
    pub fn bap_mem_to_string(arg1: bap_mem) -> *mut ::libc::c_char;
    pub fn bap_insn_to_asm(arg1: bap_insn) -> *mut ::libc::c_char;
    pub fn bap_bigstring_length(arg1: bap_bigstring) -> size_t;
    pub fn bap_bigstring_to_buf(arg1: bap_bigstring,
                                arg2: *mut ::libc::c_char, arg3: size_t)
     -> size_t;
    pub fn bap_create_bitvector64(val: int64_t, width: int16_t)
     -> bap_bitvector;
    pub fn bap_create_bigstring(buf: *const u8, len: size_t)
     -> bap_bigstring;
    pub fn bap_create_mem(pos: size_t, len: size_t, endian: bap_endian,
                          addr: bap_addr, buf: bap_bigstring) -> bap_mem;
    pub fn bap_disasm_mem(roots: *mut bap_addr, arch: bap_arch, mem: bap_mem)
     -> bap_disasm;
    pub fn bap_disasm_get_insns(d: bap_disasm) -> *mut *mut bap_disasm_insn;
    pub fn bap_insn_get_stmts(i: bap_insn) -> *mut *mut bap_stmt;
    pub fn bap_free(arg1: *mut ::libc::c_void) -> ();
}
