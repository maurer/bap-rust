/* automatically generated by rust-bindgen */

pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __max_align_ll: ::libc::c_longlong,
    pub __max_align_ld: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type max_align_t = Struct_Unnamed1;
pub type bap_disasm = *mut ::libc::c_void;
pub type bap_mem = *mut ::libc::c_void;
pub type bap_bigstring = *mut ::libc::c_void;
pub type bap_bitvector = *mut ::libc::c_void;
pub type bap_insn = *mut ::libc::c_void;
pub type bap_addr = bap_bitvector;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bap_arch {
    BAP_ARM = 9698489,
    BAP_X86 = 11960045,
    BAP_X86_64 = 1166334129,
}
pub type bap_arch = Enum_bap_arch;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bap_endian { BAP_LITTLE_ENDIAN = 1, BAP_BIG_ENDIAN = 3, }
pub type bap_endian = Enum_bap_endian;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub start: bap_addr,
    pub end: bap_addr,
    pub insn: bap_insn,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_disasm_insn = Struct_Unnamed2;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bap_type_kind { BAP_TYPE_IMM = 0, BAP_TYPE_MEM = 1, }
pub type bap_type_kind = Enum_bap_type_kind;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub name: *mut ::libc::c_char,
    pub r: u8,
    pub w: u8,
    pub x: u8,
    pub mem: bap_mem,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_segment = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub start: bap_addr,
    pub end: bap_addr,
    pub data: *mut ::libc::c_char,
    pub len: size_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_mem_c = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub name: *mut ::libc::c_char,
    pub func: u8,
    pub debug: u8,
    pub start: bap_addr,
    pub end: bap_addr,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_symbol = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub kind: bap_type_kind,
    pub _bindgen_data_1_: [u32; 2usize],
}
impl Struct_Unnamed6 {
    pub unsafe fn imm(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mem(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub addr_size: ::libc::c_int,
    pub cell_size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_type = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub name: *mut ::libc::c_char,
    pub _type: *mut bap_type,
    pub tmp: u8,
    pub version: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_var = Struct_Unnamed8;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bap_binop {
    BAP_BINOP_PLUS = 0,
    BAP_BINOP_MINUS = 1,
    BAP_BINOP_TIMES = 2,
    BAP_BINOP_DIVIDE = 3,
    BAP_BINOP_SDIVIDE = 4,
    BAP_BINOP_MOD = 5,
    BAP_BINOP_SMOD = 6,
    BAP_BINOP_LSHIFT = 7,
    BAP_BINOP_RSHIFT = 8,
    BAP_BINOP_ARSHIFT = 9,
    BAP_BINOP_AND = 10,
    BAP_BINOP_OR = 11,
    BAP_BINOP_XOR = 12,
    BAP_BINOP_EQ = 13,
    BAP_BINOP_NEQ = 14,
    BAP_BINOP_LT = 15,
    BAP_BINOP_LE = 16,
    BAP_BINOP_SLT = 17,
    BAP_BINOP_SLE = 18,
}
pub type bap_binop = Enum_bap_binop;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bap_unop { BAP_UNOP_NEG = 0, BAP_UNOP_NOT = 1, }
pub type bap_unop = Enum_bap_unop;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bap_expr_kind {
    BAP_EXPR_LOAD = 0,
    BAP_EXPR_STORE = 1,
    BAP_EXPR_BINOP = 2,
    BAP_EXPR_UNOP = 3,
    BAP_EXPR_VAR = 4,
    BAP_EXPR_IMM = 5,
    BAP_EXPR_CAST = 6,
    BAP_EXPR_LET = 7,
    BAP_EXPR_UNK = 8,
    BAP_EXPR_ITE = 9,
    BAP_EXPR_EXTRACT = 10,
    BAP_EXPR_CONCAT = 11,
}
pub type bap_expr_kind = Enum_bap_expr_kind;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bap_cast_kind {
    BAP_CAST_UNSIGNED = 0,
    BAP_CAST_SIGNED = 1,
    BAP_CAST_HIGH = 2,
    BAP_CAST_LOW = 3,
}
pub type bap_cast_type = Enum_bap_cast_kind;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bap_expr {
    pub kind: bap_expr_kind,
    pub _bindgen_data_1_: [u64; 4usize],
}
impl Struct_bap_expr {
    pub unsafe fn load(&mut self) -> *mut Struct_Unnamed9 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn store(&mut self) -> *mut Struct_Unnamed10 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn binop(&mut self) -> *mut Struct_Unnamed11 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn unop(&mut self) -> *mut Struct_Unnamed12 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn var(&mut self) -> *mut *mut bap_var {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn imm(&mut self) -> *mut bap_bitvector {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cast(&mut self) -> *mut Struct_Unnamed13 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _let(&mut self) -> *mut Struct_Unnamed14 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn unknown(&mut self) -> *mut Struct_Unnamed15 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ite(&mut self) -> *mut Struct_Unnamed16 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn extract(&mut self) -> *mut Struct_Unnamed17 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn concat(&mut self) -> *mut Struct_Unnamed18 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_bap_expr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bap_expr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub memory: *mut Struct_bap_expr,
    pub index: *mut Struct_bap_expr,
    pub endian: bap_endian,
    pub size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub memory: *mut Struct_bap_expr,
    pub index: *mut Struct_bap_expr,
    pub value: *mut Struct_bap_expr,
    pub endian: bap_endian,
    pub size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub op: bap_binop,
    pub lhs: *mut Struct_bap_expr,
    pub rhs: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub op: bap_unop,
    pub arg: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub _type: bap_cast_type,
    pub width: ::libc::c_int,
    pub val: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub bound_var: *mut bap_var,
    pub bound_expr: *mut Struct_bap_expr,
    pub body_expr: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub descr: *mut ::libc::c_char,
    pub _type: *mut bap_type,
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub cond: *mut Struct_bap_expr,
    pub t: *mut Struct_bap_expr,
    pub f: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub low_bit: ::libc::c_int,
    pub high_bit: ::libc::c_int,
    pub val: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub low: *mut Struct_bap_expr,
    pub high: *mut Struct_bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_expr = Struct_bap_expr;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_bap_stmt_kind {
    BAP_STMT_MOVE = 0,
    BAP_STMT_JMP = 1,
    BAP_STMT_SPECIAL = 2,
    BAP_STMT_WHILE = 3,
    BAP_STMT_IF = 4,
    BAP_STMT_CPU_EXN = 5,
}
pub type bap_stmt_kind = Enum_bap_stmt_kind;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_bap_stmt {
    pub kind: bap_stmt_kind,
    pub _bindgen_data_1_: [u64; 3usize],
}
impl Struct_bap_stmt {
    pub unsafe fn _move(&mut self) -> *mut Struct_Unnamed19 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn jmp(&mut self) -> *mut *mut bap_expr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn special(&mut self) -> *mut *mut ::libc::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s_while(&mut self) -> *mut Struct_Unnamed20 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ite(&mut self) -> *mut Struct_Unnamed21 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cpu_exn(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_bap_stmt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bap_stmt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub lhs: *mut bap_var,
    pub rhs: *mut bap_expr,
}
impl ::std::clone::Clone for Struct_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub cond: *mut bap_expr,
    pub body: *mut *mut Struct_bap_stmt,
}
impl ::std::clone::Clone for Struct_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub cond: *mut bap_expr,
    pub t: *mut *mut Struct_bap_stmt,
    pub f: *mut *mut Struct_bap_stmt,
}
impl ::std::clone::Clone for Struct_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type bap_stmt = Struct_bap_stmt;
#[link(name = "bap")]
extern "C" {
    pub fn bap_free_disasm(arg1: bap_disasm);
    pub fn bap_free_mem(arg1: bap_mem);
    pub fn bap_free_bigstring(arg1: bap_bigstring);
    pub fn bap_free_bitvector(arg1: bap_bitvector);
    pub fn bap_free_insn(arg1: bap_insn);
    pub fn bap_free_symbol(arg1: *mut bap_symbol);
    pub fn bap_free_disasm_insn(arg1: *mut bap_disasm_insn);
    pub fn bap_free_segment(arg1: *mut bap_segment);
    pub fn bap_render_stmt(arg1: *mut bap_stmt) -> *mut ::libc::c_char;
    pub fn bap_disasm_to_string(arg1: bap_disasm) -> *mut ::libc::c_char;
    pub fn bap_bitvector_to_string(arg1: bap_bitvector)
     -> *mut ::libc::c_char;
    pub fn bap_mem_to_string(arg1: bap_mem) -> *mut ::libc::c_char;
    pub fn bap_insn_to_asm(arg1: bap_insn) -> *mut ::libc::c_char;
    pub fn bap_render_segment(seg: *mut bap_segment) -> *mut ::libc::c_char;
    pub fn bap_bigstring_length(arg1: bap_bigstring) -> size_t;
    pub fn bap_bigstring_to_buf(arg1: bap_bigstring,
                                arg2: *mut ::libc::c_char, arg3: size_t)
     -> size_t;
    pub fn bap_bitvector_size(bv: bap_bitvector) -> size_t;
    pub fn bap_bitvector_contents(bv: bap_bitvector) -> *mut ::libc::c_char;
    pub fn bap_project_mem(arg1: bap_mem) -> *mut bap_mem_c;
    pub fn bap_create_bitvector64(val: int64_t, width: int16_t)
     -> bap_bitvector;
    pub fn bap_create_bigstring(buf: *mut ::libc::c_char, len: size_t)
     -> bap_bigstring;
    pub fn bap_create_mem(pos: size_t, len: size_t, endian: bap_endian,
                          addr: bap_addr, buf: bap_bigstring) -> bap_mem;
    pub fn bap_disasm_mem(roots: *mut bap_addr, arch: bap_arch, mem: bap_mem)
     -> bap_disasm;
    pub fn bap_disasm_get_insns(d: bap_disasm) -> *mut *mut bap_disasm_insn;
    pub fn bap_insn_get_stmts(i: bap_insn) -> *mut *mut bap_stmt;
    pub fn bap_get_segments(buf: *mut ::libc::c_char, len: size_t)
     -> *mut *mut bap_segment;
    pub fn bap_get_symbols(buf: *mut ::libc::c_char, len: size_t)
     -> *mut *mut bap_symbol;
    pub fn bap_byteweight(arch: bap_arch, mem: bap_mem) -> *mut bap_addr;
    pub fn bap_free(arg1: *mut ::libc::c_void);
    pub fn bap_init();
    pub fn bap_thread_register() -> u8;
    pub fn bap_thread_unregister() -> u8;
    pub fn bap_acquire();
    pub fn bap_release();
}
